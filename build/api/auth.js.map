{"version":3,"sources":["../../api/auth.js"],"names":["router","express","Router","get","auth","req","res","User","findById","user","select","json","console","error","message","send","msg","post","isEmail","exists","errors","isEmpty","log","status","array","body","email","password","findOne","bcrypt","compare","isMatch","payload","id","jwt","sign","process","env","jwtSecret","expiresIn","err","token"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AALA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;;AAOA;AACA;AACA;AACAF,OAAOG,GAAP,CAAW,GAAX,EAAgBC,cAAhB;AAAA,oEAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEDC,eAAKC,QAAL,CAAcH,IAAII,IAAlB,EAAwBC,MAAxB,CAA+B,WAA/B,CAFC;;AAAA;AAEdD,UAFc;;AAGpBH,UAAIK,IAAJ,CAASF,IAAT;AAHoB;AAAA;;AAAA;AAAA;AAAA;;AAKpBG,cAAQC,KAAR,CAAc,YAAEC,OAAhB;AACAR,UAAIS,IAAJ,CAAS,GAAT,EAAcJ,IAAd,CAAmB,EAAEK,KAAK,cAAP,EAAnB;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAAA;AAAA;AAAA;AAAA;;AAUA;AACA;AACA;;AAEAhB,OAAOiB,IAAP,CACC,GADD,EAEC,CACC,6BAAM,OAAN,EAAe,8BAAf,EAA+CC,OAA/C,EADD,EAEC,6BAAM,UAAN,EAAkB,sBAAlB,EAA0CC,MAA1C,EAFD,CAFD;AAAA,qEAMC,kBAAed,GAAf,EAAoBC,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACOc,YADP,GACgB,wCAAiBf,GAAjB,CADhB;;AAAA,UAEMe,OAAOC,OAAP,EAFN;AAAA;AAAA;AAAA;;AAGET,cAAQU,GAAR,CAAYjB,GAAZ;AAHF,wCAISC,IAAIiB,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAES,QAAQA,OAAOI,KAAP,EAAV,EAArB,CAJT;;AAAA;AAAA,kBAO6BnB,IAAIoB,IAPjC,EAOSC,KAPT,aAOSA,KAPT,EAOgBC,QAPhB,aAOgBA,QAPhB;AAAA;AAAA;AAAA,aAWmBpB,eAAKqB,OAAL,CAAa,EAAEF,YAAF,EAAb,CAXnB;;AAAA;AAWMjB,UAXN;;AAAA,UAYOA,IAZP;AAAA;AAAA;AAAA;;AAAA,wCAaUH,IACLiB,MADK,CACE,GADF,EAELZ,IAFK,CAEA,EAAES,QAAQ,CAAC,EAAEJ,KAAK,qBAAP,EAAD,CAAV,EAFA,CAbV;;AAAA;AAAA;AAAA,aAiBwBa,mBAAOC,OAAP,CAAeH,QAAf,EAAyBlB,KAAKkB,QAA9B,CAjBxB;;AAAA;AAiBQI,aAjBR;;AAAA,UAkBOA,OAlBP;AAAA;AAAA;AAAA;;AAAA,wCAmBUzB,IACLiB,MADK,CACE,GADF,EAELZ,IAFK,CAEA,EAAES,QAAQ,CAAC,EAAEJ,KAAK,qBAAP,EAAD,CAAV,EAFA,CAnBV;;AAAA;AAuBQgB,aAvBR,GAuBkB;AACfvB,aAAMA,KAAKwB;AADI,OAvBlB;;;AA2BEC,6BAAIC,IAAJ,CACCH,OADD,EAECI,QAAQC,GAAR,CAAYC,SAFb,EAGC,EAAEC,WAAW,MAAb,EAHD,EAIC,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACf,WAAID,GAAJ,EAAS,MAAMA,GAAN;AACTlC,WAAIK,IAAJ,CAAS,EAAE8B,YAAF,EAAT;AACA,OAPF;AA3BF;AAAA;;AAAA;AAAA;AAAA;;AAqCE7B,cAAQC,KAAR,CAAc,aAAEC,OAAhB;AACAR,UAAIiB,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,cAArB;;AAtCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAND;;AAAA;AAAA;AAAA;AAAA;;kBAiDef,M","file":"auth.js","sourcesContent":["import express from \"express\";\r\nconst router = express.Router();\r\nimport auth from \"./helper/auth\";\r\nimport User from \"../models/User\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { check, validationResult } from \"express-validator\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\n// @route GET api/auth\r\n// @desc\r\n// @access Public\r\nrouter.get(\"/\", auth, async (req, res) => {\r\n\ttry {\r\n\t\tconst user = await User.findById(req.user).select(\"-password\");\r\n\t\tres.json(user);\r\n\t} catch (e) {\r\n\t\tconsole.error(e.message);\r\n\t\tres.send(500).json({ msg: \"server error\" });\r\n\t}\r\n});\r\n\r\n// @route POST api/auth\r\n// @desc login user\r\n// @access Public\r\n\r\nrouter.post(\r\n\t\"/\",\r\n\t[\r\n\t\tcheck(\"email\", \"Please include a valid email\").isEmail(),\r\n\t\tcheck(\"password\", \"password is required\").exists()\r\n\t],\r\n\tasync function(req, res) {\r\n\t\tconst errors = validationResult(req);\r\n\t\tif (!errors.isEmpty()) {\r\n\t\t\tconsole.log(req);\r\n\t\t\treturn res.status(400).json({ errors: errors.array() });\r\n\t\t}\r\n\r\n\t\tconst { email, password } = req.body;\r\n\r\n\t\ttry {\r\n\t\t\t// see if user exists\r\n\t\t\tlet user = await User.findOne({ email });\r\n\t\t\tif (!user) {\r\n\t\t\t\treturn res\r\n\t\t\t\t\t.status(400)\r\n\t\t\t\t\t.json({ errors: [{ msg: \"invalid credentials\" }] });\r\n\t\t\t}\r\n\t\t\tconst isMatch = await bcrypt.compare(password, user.password);\r\n\t\t\tif (!isMatch) {\r\n\t\t\t\treturn res\r\n\t\t\t\t\t.status(400)\r\n\t\t\t\t\t.json({ errors: [{ msg: \"invalid credentials\" }] });\r\n\t\t\t}\r\n\t\t\tconst payload = {\r\n\t\t\t\tuser: user.id\r\n\t\t\t};\r\n\r\n\t\t\tjwt.sign(\r\n\t\t\t\tpayload,\r\n\t\t\t\tprocess.env.jwtSecret,\r\n\t\t\t\t{ expiresIn: 360000 },\r\n\t\t\t\t(err, token) => {\r\n\t\t\t\t\tif (err) throw err;\r\n\t\t\t\t\tres.json({ token });\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e.message);\r\n\t\t\tres.status(500).send(\"server error\");\r\n\t\t}\r\n\t}\r\n);\r\n\r\nexport default router;\r\n"]}